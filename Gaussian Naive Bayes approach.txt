import numpy as np

class NaiveBayesClassifier:
    def __init__(self):
        self.classes = None
        self.mean = {}
        self.variance = {}
        self.prior = {}
    
    def fit(self, X, y):
        self.classes = np.unique(y)
        for cls in self.classes:
            X_cls = X[y == cls]
            self.mean[cls] = X_cls.mean(axis=0)
            self.variance[cls] = X_cls.var(axis=0)
            self.prior[cls] = X_cls.shape[0] / X.shape[0]
    
    def _calculate_likelihood(self, cls, x):
        mean = self.mean[cls]
        variance = self.variance[cls]
        numerator = np.exp(- (x - mean) ** 2 / (2 * variance))
        denominator = np.sqrt(2 * np.pi * variance)
        return numerator / denominator
    
    def _calculate_prior(self, cls):
        return self.prior[cls]
    
    def _calculate_posterior(self, x):
        posteriors = {}
        for cls in self.classes:
            prior = self._calculate_prior(cls)
            likelihood = np.prod(self._calculate_likelihood(cls, x))
            posteriors[cls] = prior * likelihood
        return posteriors
    
    def predict(self, X):
        y_pred = [max(self._calculate_posterior(x), key=self._calculate_posterior(x).get) for x in X]
        return np.array(y_pred)
