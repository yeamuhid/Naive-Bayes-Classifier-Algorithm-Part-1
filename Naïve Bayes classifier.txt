import numpy as np

class NaiveBayes:
    def fit(self, X, y):
        # Calculate the mean, variance, and prior probability for each class
        self.classes = np.unique(y)
        self.mean = {cls: X[y == cls].mean(axis=0) for cls in self.classes}
        self.variance = {cls: X[y == cls].var(axis=0) for cls in self.classes}
        self.priors = {cls: (y == cls).mean() for cls in self.classes}
    
    def predict(self, X):
        return [self._predict_single(x) for x in X]
    
    def _predict_single(self, x):
        # Calculate posterior probability for each class
        posteriors = {}
        for cls in self.classes:
            prior = np.log(self.priors[cls])
            likelihood = np.sum(np.log(self._calculate_likelihood(cls, x)))
            posteriors[cls] = prior + likelihood
        # Return the class with the highest posterior probability
        return max(posteriors, key=posteriors.get)
    
    def _calculate_likelihood(self, cls, x):
        mean, var = self.mean[cls], self.variance[cls]
        # Gaussian likelihood calculation
        numerator = np.exp(-0.5 * ((x - mean) ** 2) / var)
        denominator = np.sqrt(2 * np.pi * var)
        return numerator / denominator
