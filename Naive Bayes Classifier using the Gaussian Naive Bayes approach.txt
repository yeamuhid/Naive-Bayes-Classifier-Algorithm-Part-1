import numpy as np

class NaiveBayesClassifier:
    def fit(self, X, y):
        # Find unique classes
        self.classes = np.unique(y)
        
        # Calculate mean, variance, and prior for each class
        self.mean = {}
        self.variance = {}
        self.prior = {}
        
        for cls in self.classes:
            X_cls = X[y == cls]
            self.mean[cls] = X_cls.mean(axis=0)
            self.variance[cls] = X_cls.var(axis=0)
            self.prior[cls] = X_cls.shape[0] / X.shape[0]
    
    def predict(self, X):
        # Predict class for each sample
        predictions = [self._predict_single(x) for x in X]
        return np.array(predictions)
    
    def _predict_single(self, x):
        # Calculate posterior probability for each class
        posteriors = {}
        
        for cls in self.classes:
            prior = np.log(self.prior[cls])
            likelihood = np.sum(np.log(self._calculate_likelihood(cls, x)))
            posteriors[cls] = prior + likelihood
        
        # Return class with highest posterior probability
        return max(posteriors, key=posteriors.get)
    
    def _calculate_likelihood(self, cls, x):
        # Gaussian likelihood calculation
        mean = self.mean[cls]
        var = self.variance[cls]
        numerator = np.exp(- (x - mean) ** 2 / (2 * var))
        denominator = np.sqrt(2 * np.pi * var)
        return numerator / denominator
